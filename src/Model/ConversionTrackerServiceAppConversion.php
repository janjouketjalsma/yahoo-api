<?php
/**
 * ConversionTrackerServiceAppConversion
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yahoo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 検索広告 API リファレンス / Yahoo! Ads Search Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。<br> 「Try it out」のご利用には、事前にアプリケーションの登録が必要です。また、アプリケーションのリダイレクトURIの1つに<br> https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.htmlを登録してください。 </div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! Ads API.<br> When you use \"Try it out\", you need to register your application in advance.<br> As one of redirect URI for application, you need to set \"https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.html\". </div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Yahoo\Model;

use \ArrayAccess;
use \Yahoo\ObjectSerializer;

/**
 * ConversionTrackerServiceAppConversion Class Doc Comment
 *
 * @category Class
 * @description &lt;div lang&#x3D;\&quot;ja\&quot;&gt;ConversionTrackerServiceAppConversionオブジェクトは、アプリコンバージョン測定タグやタグごとのパフォーマンスデータなどのアプリコンバージョントラッカー情報を表します。&lt;br&gt;このフィールドは、ADDおよびSET時に省略可能となります。&lt;br&gt; ※ADD時、conversionTrackerTypeがAPP_CONVERSIONの場合は必須です。&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;ConversionTrackerServiceAppConversion object describes the App ConversionTracker information such as App ConversionTag and performance data by  tag. &lt;br&gt;This field is optional in ADD and SET operation. &lt;br&gt; *If the conversionTrackerType is APP_CONVERSION, this field will be required in ADD operation.&lt;/div&gt;
 * @package  Yahoo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ConversionTrackerServiceAppConversion implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConversionTrackerServiceAppConversion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'appConversionType' => '\Yahoo\Model\ConversionTrackerServiceAppConversionType',
        'appId' => 'string',
        'appPlatform' => '\Yahoo\Model\ConversionTrackerServiceAppPlatform',
        'appPostbackUrl' => '\Yahoo\Model\ConversionTrackerServiceAppPostbackUrl',
        'snippetId' => 'int',
        'snippetLabel' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'appConversionType' => null,
        'appId' => null,
        'appPlatform' => null,
        'appPostbackUrl' => null,
        'snippetId' => 'int64',
        'snippetLabel' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'appConversionType' => 'appConversionType',
        'appId' => 'appId',
        'appPlatform' => 'appPlatform',
        'appPostbackUrl' => 'appPostbackUrl',
        'snippetId' => 'snippetId',
        'snippetLabel' => 'snippetLabel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'appConversionType' => 'setAppConversionType',
        'appId' => 'setAppId',
        'appPlatform' => 'setAppPlatform',
        'appPostbackUrl' => 'setAppPostbackUrl',
        'snippetId' => 'setSnippetId',
        'snippetLabel' => 'setSnippetLabel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'appConversionType' => 'getAppConversionType',
        'appId' => 'getAppId',
        'appPlatform' => 'getAppPlatform',
        'appPostbackUrl' => 'getAppPostbackUrl',
        'snippetId' => 'getSnippetId',
        'snippetLabel' => 'getSnippetLabel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['appConversionType'] = isset($data['appConversionType']) ? $data['appConversionType'] : null;
        $this->container['appId'] = isset($data['appId']) ? $data['appId'] : null;
        $this->container['appPlatform'] = isset($data['appPlatform']) ? $data['appPlatform'] : null;
        $this->container['appPostbackUrl'] = isset($data['appPostbackUrl']) ? $data['appPostbackUrl'] : null;
        $this->container['snippetId'] = isset($data['snippetId']) ? $data['snippetId'] : null;
        $this->container['snippetLabel'] = isset($data['snippetLabel']) ? $data['snippetLabel'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets appConversionType
     *
     * @return \Yahoo\Model\ConversionTrackerServiceAppConversionType|null
     */
    public function getAppConversionType()
    {
        return $this->container['appConversionType'];
    }

    /**
     * Sets appConversionType
     *
     * @param \Yahoo\Model\ConversionTrackerServiceAppConversionType|null $appConversionType appConversionType
     *
     * @return $this
     */
    public function setAppConversionType($appConversionType)
    {
        $this->container['appConversionType'] = $appConversionType;

        return $this;
    }

    /**
     * Gets appId
     *
     * @return string|null
     */
    public function getAppId()
    {
        return $this->container['appId'];
    }

    /**
     * Sets appId
     *
     * @param string|null $appId <div lang=\"ja\">アプリケーションIDです。<br>このフィールドは、いずれの場合でも省略可能となります。</div><div lang=\"en\">Application  ID. <br>This field is optional in any cases.</div>
     *
     * @return $this
     */
    public function setAppId($appId)
    {
        $this->container['appId'] = $appId;

        return $this;
    }

    /**
     * Gets appPlatform
     *
     * @return \Yahoo\Model\ConversionTrackerServiceAppPlatform|null
     */
    public function getAppPlatform()
    {
        return $this->container['appPlatform'];
    }

    /**
     * Sets appPlatform
     *
     * @param \Yahoo\Model\ConversionTrackerServiceAppPlatform|null $appPlatform appPlatform
     *
     * @return $this
     */
    public function setAppPlatform($appPlatform)
    {
        $this->container['appPlatform'] = $appPlatform;

        return $this;
    }

    /**
     * Gets appPostbackUrl
     *
     * @return \Yahoo\Model\ConversionTrackerServiceAppPostbackUrl|null
     */
    public function getAppPostbackUrl()
    {
        return $this->container['appPostbackUrl'];
    }

    /**
     * Sets appPostbackUrl
     *
     * @param \Yahoo\Model\ConversionTrackerServiceAppPostbackUrl|null $appPostbackUrl appPostbackUrl
     *
     * @return $this
     */
    public function setAppPostbackUrl($appPostbackUrl)
    {
        $this->container['appPostbackUrl'] = $appPostbackUrl;

        return $this;
    }

    /**
     * Gets snippetId
     *
     * @return int|null
     */
    public function getSnippetId()
    {
        return $this->container['snippetId'];
    }

    /**
     * Sets snippetId
     *
     * @param int|null $snippetId <div lang=\"ja\">コンバージョンIDです。</div><div lang=\"en\">Converison ID</div>
     *
     * @return $this
     */
    public function setSnippetId($snippetId)
    {
        $this->container['snippetId'] = $snippetId;

        return $this;
    }

    /**
     * Gets snippetLabel
     *
     * @return string|null
     */
    public function getSnippetLabel()
    {
        return $this->container['snippetLabel'];
    }

    /**
     * Sets snippetLabel
     *
     * @param string|null $snippetLabel <div lang=\"ja\">コンバージョントラッカーラベルです。</div><div lang=\"en\">Converison tracker label</div>
     *
     * @return $this
     */
    public function setSnippetLabel($snippetLabel)
    {
        $this->container['snippetLabel'] = $snippetLabel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


