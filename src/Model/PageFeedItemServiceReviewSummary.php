<?php
/**
 * PageFeedItemServiceReviewSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yahoo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 検索広告 API リファレンス / Yahoo! Ads Search Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。<br> 「Try it out」のご利用には、事前にアプリケーションの登録が必要です。また、アプリケーションのリダイレクトURIの1つに<br> https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.htmlを登録してください。 </div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! Ads API.<br> When you use \"Try it out\", you need to register your application in advance.<br> As one of redirect URI for application, you need to set \"https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.html\". </div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Yahoo\Model;

use \ArrayAccess;
use \Yahoo\ObjectSerializer;

/**
 * PageFeedItemServiceReviewSummary Class Doc Comment
 *
 * @category Class
 * @description &lt;div lang&#x3D;\&quot;ja\&quot;&gt;PageFeedItemServiceReviewSummaryオブジェクトは、ページフィードアイテムの審査成績、状況サマリーを格納します。&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;PageFeedItemServiceReviewSummary object retains the examination results of the page feed item, the situation summary acquisition result.&lt;/div&gt;
 * @package  Yahoo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PageFeedItemServiceReviewSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PageFeedItemServiceReviewSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accountId' => 'int',
        'approvedCount' => 'int',
        'approvedWithReviewCount' => 'int',
        'entityCount' => 'int',
        'feedId' => 'int',
        'postDisapprovedCount' => 'int',
        'preDisapprovedCount' => 'int',
        'reviewCount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'accountId' => 'int64',
        'approvedCount' => 'int64',
        'approvedWithReviewCount' => 'int64',
        'entityCount' => 'int64',
        'feedId' => 'int64',
        'postDisapprovedCount' => 'int64',
        'preDisapprovedCount' => 'int64',
        'reviewCount' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountId' => 'accountId',
        'approvedCount' => 'approvedCount',
        'approvedWithReviewCount' => 'approvedWithReviewCount',
        'entityCount' => 'entityCount',
        'feedId' => 'feedId',
        'postDisapprovedCount' => 'postDisapprovedCount',
        'preDisapprovedCount' => 'preDisapprovedCount',
        'reviewCount' => 'reviewCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountId' => 'setAccountId',
        'approvedCount' => 'setApprovedCount',
        'approvedWithReviewCount' => 'setApprovedWithReviewCount',
        'entityCount' => 'setEntityCount',
        'feedId' => 'setFeedId',
        'postDisapprovedCount' => 'setPostDisapprovedCount',
        'preDisapprovedCount' => 'setPreDisapprovedCount',
        'reviewCount' => 'setReviewCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountId' => 'getAccountId',
        'approvedCount' => 'getApprovedCount',
        'approvedWithReviewCount' => 'getApprovedWithReviewCount',
        'entityCount' => 'getEntityCount',
        'feedId' => 'getFeedId',
        'postDisapprovedCount' => 'getPostDisapprovedCount',
        'preDisapprovedCount' => 'getPreDisapprovedCount',
        'reviewCount' => 'getReviewCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountId'] = isset($data['accountId']) ? $data['accountId'] : null;
        $this->container['approvedCount'] = isset($data['approvedCount']) ? $data['approvedCount'] : null;
        $this->container['approvedWithReviewCount'] = isset($data['approvedWithReviewCount']) ? $data['approvedWithReviewCount'] : null;
        $this->container['entityCount'] = isset($data['entityCount']) ? $data['entityCount'] : null;
        $this->container['feedId'] = isset($data['feedId']) ? $data['feedId'] : null;
        $this->container['postDisapprovedCount'] = isset($data['postDisapprovedCount']) ? $data['postDisapprovedCount'] : null;
        $this->container['preDisapprovedCount'] = isset($data['preDisapprovedCount']) ? $data['preDisapprovedCount'] : null;
        $this->container['reviewCount'] = isset($data['reviewCount']) ? $data['reviewCount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountId
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param int|null $accountId <div lang=\"ja\">アカウントID</div><div lang=\"en\">Account ID</div>
     *
     * @return $this
     */
    public function setAccountId($accountId)
    {
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets approvedCount
     *
     * @return int|null
     */
    public function getApprovedCount()
    {
        return $this->container['approvedCount'];
    }

    /**
     * Sets approvedCount
     *
     * @param int|null $approvedCount <div lang=\"ja\">承認済みの件数</div><div lang=\"en\">Count of approved</div>
     *
     * @return $this
     */
    public function setApprovedCount($approvedCount)
    {
        $this->container['approvedCount'] = $approvedCount;

        return $this;
    }

    /**
     * Gets approvedWithReviewCount
     *
     * @return int|null
     */
    public function getApprovedWithReviewCount()
    {
        return $this->container['approvedWithReviewCount'];
    }

    /**
     * Sets approvedWithReviewCount
     *
     * @param int|null $approvedWithReviewCount <div lang=\"ja\">編集内容審査中の件数</div><div lang=\"en\">Count of approved with review</div>
     *
     * @return $this
     */
    public function setApprovedWithReviewCount($approvedWithReviewCount)
    {
        $this->container['approvedWithReviewCount'] = $approvedWithReviewCount;

        return $this;
    }

    /**
     * Gets entityCount
     *
     * @return int|null
     */
    public function getEntityCount()
    {
        return $this->container['entityCount'];
    }

    /**
     * Sets entityCount
     *
     * @param int|null $entityCount <div lang=\"ja\">フィードフォルダ内にあるページフィードアイテムの総件数</div><div lang=\"en\">Total count of page feed item in feed folder</div>
     *
     * @return $this
     */
    public function setEntityCount($entityCount)
    {
        $this->container['entityCount'] = $entityCount;

        return $this;
    }

    /**
     * Gets feedId
     *
     * @return int|null
     */
    public function getFeedId()
    {
        return $this->container['feedId'];
    }

    /**
     * Sets feedId
     *
     * @param int|null $feedId <div lang=\"ja\">フィードID</div><div lang=\"en\">Feed ID</div>
     *
     * @return $this
     */
    public function setFeedId($feedId)
    {
        $this->container['feedId'] = $feedId;

        return $this;
    }

    /**
     * Gets postDisapprovedCount
     *
     * @return int|null
     */
    public function getPostDisapprovedCount()
    {
        return $this->container['postDisapprovedCount'];
    }

    /**
     * Sets postDisapprovedCount
     *
     * @param int|null $postDisapprovedCount <div lang=\"ja\">配信停止の件数</div><div lang=\"en\">Count of distribution cancelled</div>
     *
     * @return $this
     */
    public function setPostDisapprovedCount($postDisapprovedCount)
    {
        $this->container['postDisapprovedCount'] = $postDisapprovedCount;

        return $this;
    }

    /**
     * Gets preDisapprovedCount
     *
     * @return int|null
     */
    public function getPreDisapprovedCount()
    {
        return $this->container['preDisapprovedCount'];
    }

    /**
     * Sets preDisapprovedCount
     *
     * @param int|null $preDisapprovedCount <div lang=\"ja\">掲載不可の件数</div><div lang=\"en\">Count of disapproved</div>
     *
     * @return $this
     */
    public function setPreDisapprovedCount($preDisapprovedCount)
    {
        $this->container['preDisapprovedCount'] = $preDisapprovedCount;

        return $this;
    }

    /**
     * Gets reviewCount
     *
     * @return int|null
     */
    public function getReviewCount()
    {
        return $this->container['reviewCount'];
    }

    /**
     * Sets reviewCount
     *
     * @param int|null $reviewCount <div lang=\"ja\">審査中の件数</div><div lang=\"en\">Count of review</div>
     *
     * @return $this
     */
    public function setReviewCount($reviewCount)
    {
        $this->container['reviewCount'] = $reviewCount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


