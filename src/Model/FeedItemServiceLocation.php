<?php
/**
 * FeedItemServiceLocation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yahoo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 検索広告 API リファレンス / Yahoo! Ads Search Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。<br> 「Try it out」のご利用には、事前にアプリケーションの登録が必要です。また、アプリケーションのリダイレクトURIの1つに<br> https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.htmlを登録してください。 </div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! Ads API.<br> When you use \"Try it out\", you need to register your application in advance.<br> As one of redirect URI for application, you need to set \"https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.html\". </div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Yahoo\Model;

use \ArrayAccess;
use \Yahoo\ObjectSerializer;

/**
 * FeedItemServiceLocation Class Doc Comment
 *
 * @category Class
 * @description &lt;div lang&#x3D;\&quot;ja\&quot;&gt;FeedItemServiceLocationオブジェクトは、地域設定情報を格納します。&lt;br&gt; このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。&lt;br&gt; ※アドカスタマイザーの場合は、ADD時に省略可能となります。&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;FeedItemServiceLocation object contains the information of Geographic FeedItemServiceLocation. &lt;br&gt;Although this field will be returned in the  response, it will be ignored on input. &lt;br&gt; *For AD_CUSTOMIZER, this field is optional in ADD operation.&lt;/div&gt;
 * @package  Yahoo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FeedItemServiceLocation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FeedItemServiceLocation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'criterionTypeFeedItem' => '\Yahoo\Model\FeedItemServiceCriterionTypeFeedItem',
        'geoRestriction' => '\Yahoo\Model\FeedItemServiceGeoRestriction',
        'isRemove' => '\Yahoo\Model\FeedItemServiceIsRemove',
        'targetId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'criterionTypeFeedItem' => null,
        'geoRestriction' => null,
        'isRemove' => null,
        'targetId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'criterionTypeFeedItem' => 'criterionTypeFeedItem',
        'geoRestriction' => 'geoRestriction',
        'isRemove' => 'isRemove',
        'targetId' => 'targetId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'criterionTypeFeedItem' => 'setCriterionTypeFeedItem',
        'geoRestriction' => 'setGeoRestriction',
        'isRemove' => 'setIsRemove',
        'targetId' => 'setTargetId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'criterionTypeFeedItem' => 'getCriterionTypeFeedItem',
        'geoRestriction' => 'getGeoRestriction',
        'isRemove' => 'getIsRemove',
        'targetId' => 'getTargetId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['criterionTypeFeedItem'] = isset($data['criterionTypeFeedItem']) ? $data['criterionTypeFeedItem'] : null;
        $this->container['geoRestriction'] = isset($data['geoRestriction']) ? $data['geoRestriction'] : null;
        $this->container['isRemove'] = isset($data['isRemove']) ? $data['isRemove'] : null;
        $this->container['targetId'] = isset($data['targetId']) ? $data['targetId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets criterionTypeFeedItem
     *
     * @return \Yahoo\Model\FeedItemServiceCriterionTypeFeedItem|null
     */
    public function getCriterionTypeFeedItem()
    {
        return $this->container['criterionTypeFeedItem'];
    }

    /**
     * Sets criterionTypeFeedItem
     *
     * @param \Yahoo\Model\FeedItemServiceCriterionTypeFeedItem|null $criterionTypeFeedItem criterionTypeFeedItem
     *
     * @return $this
     */
    public function setCriterionTypeFeedItem($criterionTypeFeedItem)
    {
        $this->container['criterionTypeFeedItem'] = $criterionTypeFeedItem;

        return $this;
    }

    /**
     * Gets geoRestriction
     *
     * @return \Yahoo\Model\FeedItemServiceGeoRestriction|null
     */
    public function getGeoRestriction()
    {
        return $this->container['geoRestriction'];
    }

    /**
     * Sets geoRestriction
     *
     * @param \Yahoo\Model\FeedItemServiceGeoRestriction|null $geoRestriction geoRestriction
     *
     * @return $this
     */
    public function setGeoRestriction($geoRestriction)
    {
        $this->container['geoRestriction'] = $geoRestriction;

        return $this;
    }

    /**
     * Gets isRemove
     *
     * @return \Yahoo\Model\FeedItemServiceIsRemove|null
     */
    public function getIsRemove()
    {
        return $this->container['isRemove'];
    }

    /**
     * Sets isRemove
     *
     * @param \Yahoo\Model\FeedItemServiceIsRemove|null $isRemove isRemove
     *
     * @return $this
     */
    public function setIsRemove($isRemove)
    {
        $this->container['isRemove'] = $isRemove;

        return $this;
    }

    /**
     * Gets targetId
     *
     * @return string|null
     */
    public function getTargetId()
    {
        return $this->container['targetId'];
    }

    /**
     * Sets targetId
     *
     * @param string|null $targetId <div lang=\"ja\">地域種別コードです。<br> このフィールドは、ADD時に必須となり、SET時に省略可能となり、REMOVE時に無視されます。</div><div lang=\"en\">FeedItemServiceLocation  Type Code. <br>This field is required in ADD operation, is optional in SET operation, and will be ignored in REMOVE operation.</div>
     *
     * @return $this
     */
    public function setTargetId($targetId)
    {
        $this->container['targetId'] = $targetId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


