<?php
/**
 * ConversionTracker
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yahoo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 検索広告 API リファレンス / Yahoo! Ads Search Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。<br> 「Try it out」のご利用には、事前にアプリケーションの登録が必要です。また、アプリケーションのリダイレクトURIの1つに<br> https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.htmlを登録してください。 </div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! Ads API.<br> When you use \"Try it out\", you need to register your application in advance.<br> As one of redirect URI for application, you need to set \"https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.html\". </div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Yahoo\Model;

use \ArrayAccess;
use \Yahoo\ObjectSerializer;

/**
 * ConversionTracker Class Doc Comment
 *
 * @category Class
 * @description &lt;div lang&#x3D;\&quot;ja\&quot;&gt;ConversionTrackerオブジェクトは、コンバージョン測定タグやタグごとのパフォーマンスデータなどのコンバージョントラッカー情報を表します。&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;ConversionTracker object shows ConversionTracker information such as ConversionTag and performance data by tag.&lt;/div&gt;
 * @package  Yahoo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ConversionTracker implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConversionTracker';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accountId' => 'int',
        'allConversionValue' => 'string',
        'allConversions' => 'int',
        'appConversion' => '\Yahoo\Model\ConversionTrackerServiceAppConversion',
        'category' => '\Yahoo\Model\ConversionTrackerServiceCategory',
        'conversionCountingType' => '\Yahoo\Model\ConversionTrackerServiceConversionCountingType',
        'conversionTrackerId' => 'int',
        'conversionTrackerName' => 'string',
        'conversionTrackerType' => '\Yahoo\Model\ConversionTrackerServiceConversionTrackerType',
        'conversionValue' => 'string',
        'conversions' => 'int',
        'excludeFromBidding' => '\Yahoo\Model\ConversionTrackerServiceExcludeFromBidding',
        'measurementPeriod' => 'int',
        'mostRecentConversionDate' => 'string',
        'status' => '\Yahoo\Model\ConversionTrackerServiceStatus',
        'userRevenueValue' => 'string',
        'webConversion' => '\Yahoo\Model\ConversionTrackerServiceWebConversion'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'accountId' => 'int64',
        'allConversionValue' => null,
        'allConversions' => 'int64',
        'appConversion' => null,
        'category' => null,
        'conversionCountingType' => null,
        'conversionTrackerId' => 'int64',
        'conversionTrackerName' => null,
        'conversionTrackerType' => null,
        'conversionValue' => null,
        'conversions' => 'int64',
        'excludeFromBidding' => null,
        'measurementPeriod' => 'int32',
        'mostRecentConversionDate' => null,
        'status' => null,
        'userRevenueValue' => null,
        'webConversion' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountId' => 'accountId',
        'allConversionValue' => 'allConversionValue',
        'allConversions' => 'allConversions',
        'appConversion' => 'appConversion',
        'category' => 'category',
        'conversionCountingType' => 'conversionCountingType',
        'conversionTrackerId' => 'conversionTrackerId',
        'conversionTrackerName' => 'conversionTrackerName',
        'conversionTrackerType' => 'conversionTrackerType',
        'conversionValue' => 'conversionValue',
        'conversions' => 'conversions',
        'excludeFromBidding' => 'excludeFromBidding',
        'measurementPeriod' => 'measurementPeriod',
        'mostRecentConversionDate' => 'mostRecentConversionDate',
        'status' => 'status',
        'userRevenueValue' => 'userRevenueValue',
        'webConversion' => 'webConversion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountId' => 'setAccountId',
        'allConversionValue' => 'setAllConversionValue',
        'allConversions' => 'setAllConversions',
        'appConversion' => 'setAppConversion',
        'category' => 'setCategory',
        'conversionCountingType' => 'setConversionCountingType',
        'conversionTrackerId' => 'setConversionTrackerId',
        'conversionTrackerName' => 'setConversionTrackerName',
        'conversionTrackerType' => 'setConversionTrackerType',
        'conversionValue' => 'setConversionValue',
        'conversions' => 'setConversions',
        'excludeFromBidding' => 'setExcludeFromBidding',
        'measurementPeriod' => 'setMeasurementPeriod',
        'mostRecentConversionDate' => 'setMostRecentConversionDate',
        'status' => 'setStatus',
        'userRevenueValue' => 'setUserRevenueValue',
        'webConversion' => 'setWebConversion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountId' => 'getAccountId',
        'allConversionValue' => 'getAllConversionValue',
        'allConversions' => 'getAllConversions',
        'appConversion' => 'getAppConversion',
        'category' => 'getCategory',
        'conversionCountingType' => 'getConversionCountingType',
        'conversionTrackerId' => 'getConversionTrackerId',
        'conversionTrackerName' => 'getConversionTrackerName',
        'conversionTrackerType' => 'getConversionTrackerType',
        'conversionValue' => 'getConversionValue',
        'conversions' => 'getConversions',
        'excludeFromBidding' => 'getExcludeFromBidding',
        'measurementPeriod' => 'getMeasurementPeriod',
        'mostRecentConversionDate' => 'getMostRecentConversionDate',
        'status' => 'getStatus',
        'userRevenueValue' => 'getUserRevenueValue',
        'webConversion' => 'getWebConversion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountId'] = isset($data['accountId']) ? $data['accountId'] : null;
        $this->container['allConversionValue'] = isset($data['allConversionValue']) ? $data['allConversionValue'] : null;
        $this->container['allConversions'] = isset($data['allConversions']) ? $data['allConversions'] : null;
        $this->container['appConversion'] = isset($data['appConversion']) ? $data['appConversion'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['conversionCountingType'] = isset($data['conversionCountingType']) ? $data['conversionCountingType'] : null;
        $this->container['conversionTrackerId'] = isset($data['conversionTrackerId']) ? $data['conversionTrackerId'] : null;
        $this->container['conversionTrackerName'] = isset($data['conversionTrackerName']) ? $data['conversionTrackerName'] : null;
        $this->container['conversionTrackerType'] = isset($data['conversionTrackerType']) ? $data['conversionTrackerType'] : null;
        $this->container['conversionValue'] = isset($data['conversionValue']) ? $data['conversionValue'] : null;
        $this->container['conversions'] = isset($data['conversions']) ? $data['conversions'] : null;
        $this->container['excludeFromBidding'] = isset($data['excludeFromBidding']) ? $data['excludeFromBidding'] : null;
        $this->container['measurementPeriod'] = isset($data['measurementPeriod']) ? $data['measurementPeriod'] : null;
        $this->container['mostRecentConversionDate'] = isset($data['mostRecentConversionDate']) ? $data['mostRecentConversionDate'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['userRevenueValue'] = isset($data['userRevenueValue']) ? $data['userRevenueValue'] : null;
        $this->container['webConversion'] = isset($data['webConversion']) ? $data['webConversion'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountId
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param int|null $accountId <div lang=\"ja\">アカウントIDです。</div><div lang=\"en\">Account ID.</div>
     *
     * @return $this
     */
    public function setAccountId($accountId)
    {
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets allConversionValue
     *
     * @return string|null
     */
    public function getAllConversionValue()
    {
        return $this->container['allConversionValue'];
    }

    /**
     * Sets allConversionValue
     *
     * @param string|null $allConversionValue <div lang=\"ja\">自動入札設定対象のコンバージョン値と、対象外のコンバージョン値の合計です。</div><div lang=\"en\">Total value of conversions to be included to auto bidding and to be exluded from auto bidding.</div>
     *
     * @return $this
     */
    public function setAllConversionValue($allConversionValue)
    {
        $this->container['allConversionValue'] = $allConversionValue;

        return $this;
    }

    /**
     * Gets allConversions
     *
     * @return int|null
     */
    public function getAllConversions()
    {
        return $this->container['allConversions'];
    }

    /**
     * Sets allConversions
     *
     * @param int|null $allConversions <div lang=\"ja\">自動入札設定対象のコンバージョン数と、対象外のコンバージョン数の合計です。</div><div lang=\"en\">Total number of conversions to be included to auto bidding and to be excluded from auto bidding.</div>
     *
     * @return $this
     */
    public function setAllConversions($allConversions)
    {
        $this->container['allConversions'] = $allConversions;

        return $this;
    }

    /**
     * Gets appConversion
     *
     * @return \Yahoo\Model\ConversionTrackerServiceAppConversion|null
     */
    public function getAppConversion()
    {
        return $this->container['appConversion'];
    }

    /**
     * Sets appConversion
     *
     * @param \Yahoo\Model\ConversionTrackerServiceAppConversion|null $appConversion appConversion
     *
     * @return $this
     */
    public function setAppConversion($appConversion)
    {
        $this->container['appConversion'] = $appConversion;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \Yahoo\Model\ConversionTrackerServiceCategory|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \Yahoo\Model\ConversionTrackerServiceCategory|null $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets conversionCountingType
     *
     * @return \Yahoo\Model\ConversionTrackerServiceConversionCountingType|null
     */
    public function getConversionCountingType()
    {
        return $this->container['conversionCountingType'];
    }

    /**
     * Sets conversionCountingType
     *
     * @param \Yahoo\Model\ConversionTrackerServiceConversionCountingType|null $conversionCountingType conversionCountingType
     *
     * @return $this
     */
    public function setConversionCountingType($conversionCountingType)
    {
        $this->container['conversionCountingType'] = $conversionCountingType;

        return $this;
    }

    /**
     * Gets conversionTrackerId
     *
     * @return int|null
     */
    public function getConversionTrackerId()
    {
        return $this->container['conversionTrackerId'];
    }

    /**
     * Sets conversionTrackerId
     *
     * @param int|null $conversionTrackerId <div lang=\"ja\">コンバージョントラッカーのIDです。<br> このフィールドは、SET時に必須となります。</div><div lang=\"en\">ConversionTracker  ID. <br>This field is required in SET operation.</div>
     *
     * @return $this
     */
    public function setConversionTrackerId($conversionTrackerId)
    {
        $this->container['conversionTrackerId'] = $conversionTrackerId;

        return $this;
    }

    /**
     * Gets conversionTrackerName
     *
     * @return string|null
     */
    public function getConversionTrackerName()
    {
        return $this->container['conversionTrackerName'];
    }

    /**
     * Sets conversionTrackerName
     *
     * @param string|null $conversionTrackerName <div lang=\"ja\">コンバージョントラッカーの名称です。<br> このフィールドは、ADD時に必須となり、SET時に省略可能となります。</div><div lang=\"en\">ConversionTracker  Name. <br>This field is required in ADD operation, and is optional in SET operation.</div>
     *
     * @return $this
     */
    public function setConversionTrackerName($conversionTrackerName)
    {
        $this->container['conversionTrackerName'] = $conversionTrackerName;

        return $this;
    }

    /**
     * Gets conversionTrackerType
     *
     * @return \Yahoo\Model\ConversionTrackerServiceConversionTrackerType|null
     */
    public function getConversionTrackerType()
    {
        return $this->container['conversionTrackerType'];
    }

    /**
     * Sets conversionTrackerType
     *
     * @param \Yahoo\Model\ConversionTrackerServiceConversionTrackerType|null $conversionTrackerType conversionTrackerType
     *
     * @return $this
     */
    public function setConversionTrackerType($conversionTrackerType)
    {
        $this->container['conversionTrackerType'] = $conversionTrackerType;

        return $this;
    }

    /**
     * Gets conversionValue
     *
     * @return string|null
     */
    public function getConversionValue()
    {
        return $this->container['conversionValue'];
    }

    /**
     * Sets conversionValue
     *
     * @param string|null $conversionValue <div lang=\"ja\">自動入札設定対象のコンバージョン値です。</div><div lang=\"en\">Conversion value to be included to auto bidding.</div>
     *
     * @return $this
     */
    public function setConversionValue($conversionValue)
    {
        $this->container['conversionValue'] = $conversionValue;

        return $this;
    }

    /**
     * Gets conversions
     *
     * @return int|null
     */
    public function getConversions()
    {
        return $this->container['conversions'];
    }

    /**
     * Sets conversions
     *
     * @param int|null $conversions <div lang=\"ja\">自動入札設定対象のコンバージョン数です。<br>ユニークコンバージョンか総コンバージョンかは、countingTypeに依存します。</div><div lang=\"en\">Conversions which counts as included to Auto Bidding setting.<br>countingType specifies whether one-per-click or many-per-click.</div>
     *
     * @return $this
     */
    public function setConversions($conversions)
    {
        $this->container['conversions'] = $conversions;

        return $this;
    }

    /**
     * Gets excludeFromBidding
     *
     * @return \Yahoo\Model\ConversionTrackerServiceExcludeFromBidding|null
     */
    public function getExcludeFromBidding()
    {
        return $this->container['excludeFromBidding'];
    }

    /**
     * Sets excludeFromBidding
     *
     * @param \Yahoo\Model\ConversionTrackerServiceExcludeFromBidding|null $excludeFromBidding excludeFromBidding
     *
     * @return $this
     */
    public function setExcludeFromBidding($excludeFromBidding)
    {
        $this->container['excludeFromBidding'] = $excludeFromBidding;

        return $this;
    }

    /**
     * Gets measurementPeriod
     *
     * @return int|null
     */
    public function getMeasurementPeriod()
    {
        return $this->container['measurementPeriod'];
    }

    /**
     * Sets measurementPeriod
     *
     * @param int|null $measurementPeriod <div lang=\"ja\">コンバージョン計測期間です（単位：日)。<br>7～90日間で設定可能です。<br>※アプリダウンロードの場合は30日間固定。<br>このフィールドは、ADDおよびSET時に省略可能となります。<br>※ADD時のデフォルト設定値は30となります。</div><div lang=\"en\">Counting period of conversoins (days).<br>It is  available between 7 to 90 days<br>* For Mobile App Download, this period is fixed as 30 days. <br>This field is  optional in ADD and SET operation. <br> *The default value in ADD operation will be 30.</div>
     *
     * @return $this
     */
    public function setMeasurementPeriod($measurementPeriod)
    {
        $this->container['measurementPeriod'] = $measurementPeriod;

        return $this;
    }

    /**
     * Gets mostRecentConversionDate
     *
     * @return string|null
     */
    public function getMostRecentConversionDate()
    {
        return $this->container['mostRecentConversionDate'];
    }

    /**
     * Sets mostRecentConversionDate
     *
     * @param string|null $mostRecentConversionDate <div lang=\"ja\">直近のコンバージョン発生日です。</div><div lang=\"en\">The most latest date when conversion occured.</div>
     *
     * @return $this
     */
    public function setMostRecentConversionDate($mostRecentConversionDate)
    {
        $this->container['mostRecentConversionDate'] = $mostRecentConversionDate;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Yahoo\Model\ConversionTrackerServiceStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Yahoo\Model\ConversionTrackerServiceStatus|null $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets userRevenueValue
     *
     * @return string|null
     */
    public function getUserRevenueValue()
    {
        return $this->container['userRevenueValue'];
    }

    /**
     * Sets userRevenueValue
     *
     * @param string|null $userRevenueValue <div lang=\"ja\">このコンバージョントラッカーに対するユーザー指定の収益値です。<br>1コンバージョンあたりの売上金額が固定値の場合、その金額を設定することで、売上金額をレポートなどで確認できます。<br>ADDリクエスト時に未指定の場合、0が設定されます。<br>このフィールドは、ADD時およびSET時に省略可能となります。</div><div lang=\"en\">The value of revenue of the conversion tracker specified by user.<br>When the sales revenue of 1 conversion is fixed value, you are able to review the total sales on reports by specifying the amount on this item.<br>If it is not specified on ADD request, the value &#34;0&#34; is set. <br>This field is optional in ADD and SET operation. </div>
     *
     * @return $this
     */
    public function setUserRevenueValue($userRevenueValue)
    {
        $this->container['userRevenueValue'] = $userRevenueValue;

        return $this;
    }

    /**
     * Gets webConversion
     *
     * @return \Yahoo\Model\ConversionTrackerServiceWebConversion|null
     */
    public function getWebConversion()
    {
        return $this->container['webConversion'];
    }

    /**
     * Sets webConversion
     *
     * @param \Yahoo\Model\ConversionTrackerServiceWebConversion|null $webConversion webConversion
     *
     * @return $this
     */
    public function setWebConversion($webConversion)
    {
        $this->container['webConversion'] = $webConversion;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


