<?php
/**
 * SharedCriterion
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yahoo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 検索広告 API リファレンス / Yahoo! Ads Search Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。<br> 「Try it out」のご利用には、事前にアプリケーションの登録が必要です。また、アプリケーションのリダイレクトURIの1つに<br> https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.htmlを登録してください。 </div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! Ads API.<br> When you use \"Try it out\", you need to register your application in advance.<br> As one of redirect URI for application, you need to set \"https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.html\". </div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Yahoo\Model;

use \ArrayAccess;
use \Yahoo\ObjectSerializer;

/**
 * SharedCriterion Class Doc Comment
 *
 * @category Class
 * @description &lt;div lang&#x3D;\&quot;ja\&quot;&gt;SharedCriterionオブジェクトは、対象外キーワード情報を保持します。&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;SharedCriterion object holds negative keyword information.&lt;/div&gt;
 * @package  Yahoo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SharedCriterion implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SharedCriterion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accountId' => 'int',
        'criterionId' => 'int',
        'keywordMatchType' => '\Yahoo\Model\SharedCriterionServiceKeywordMatchType',
        'sharedListId' => 'int',
        'text' => 'string',
        'use' => '\Yahoo\Model\SharedCriterionServiceUse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'accountId' => 'int64',
        'criterionId' => 'int64',
        'keywordMatchType' => null,
        'sharedListId' => 'int64',
        'text' => null,
        'use' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountId' => 'accountId',
        'criterionId' => 'criterionId',
        'keywordMatchType' => 'keywordMatchType',
        'sharedListId' => 'sharedListId',
        'text' => 'text',
        'use' => 'use'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountId' => 'setAccountId',
        'criterionId' => 'setCriterionId',
        'keywordMatchType' => 'setKeywordMatchType',
        'sharedListId' => 'setSharedListId',
        'text' => 'setText',
        'use' => 'setUse'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountId' => 'getAccountId',
        'criterionId' => 'getCriterionId',
        'keywordMatchType' => 'getKeywordMatchType',
        'sharedListId' => 'getSharedListId',
        'text' => 'getText',
        'use' => 'getUse'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountId'] = isset($data['accountId']) ? $data['accountId'] : null;
        $this->container['criterionId'] = isset($data['criterionId']) ? $data['criterionId'] : null;
        $this->container['keywordMatchType'] = isset($data['keywordMatchType']) ? $data['keywordMatchType'] : null;
        $this->container['sharedListId'] = isset($data['sharedListId']) ? $data['sharedListId'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['use'] = isset($data['use']) ? $data['use'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountId
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param int|null $accountId <div lang=\"ja\">アカウントIDです。</div><div lang=\"en\">Account ID.</div>
     *
     * @return $this
     */
    public function setAccountId($accountId)
    {
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets criterionId
     *
     * @return int|null
     */
    public function getCriterionId()
    {
        return $this->container['criterionId'];
    }

    /**
     * Sets criterionId
     *
     * @param int|null $criterionId <div lang=\"ja\">クライテリオンIDです。<br> REMOVE時、このフィールドは必須となります。</div><div lang=\"en\">Criterion ID. <br>This field is required in REMOVE operation.</div>
     *
     * @return $this
     */
    public function setCriterionId($criterionId)
    {
        $this->container['criterionId'] = $criterionId;

        return $this;
    }

    /**
     * Gets keywordMatchType
     *
     * @return \Yahoo\Model\SharedCriterionServiceKeywordMatchType|null
     */
    public function getKeywordMatchType()
    {
        return $this->container['keywordMatchType'];
    }

    /**
     * Sets keywordMatchType
     *
     * @param \Yahoo\Model\SharedCriterionServiceKeywordMatchType|null $keywordMatchType keywordMatchType
     *
     * @return $this
     */
    public function setKeywordMatchType($keywordMatchType)
    {
        $this->container['keywordMatchType'] = $keywordMatchType;

        return $this;
    }

    /**
     * Gets sharedListId
     *
     * @return int|null
     */
    public function getSharedListId()
    {
        return $this->container['sharedListId'];
    }

    /**
     * Sets sharedListId
     *
     * @param int|null $sharedListId <div lang=\"ja\">アカウント共有リストIDです。<br> ADDおよびREMOVE時、このフィールドは必須となります。</div><div lang=\"en\">Account shared list ID. <br>This field is required in ADD and REMOVE operation.</div>
     *
     * @return $this
     */
    public function setSharedListId($sharedListId)
    {
        $this->container['sharedListId'] = $sharedListId;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text <div lang=\"ja\">キーワードです。<br> ADD時、このフィールドは必須となります。</div><div lang=\"en\">Keyword. <br>This field is required in ADD operation.</div>
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets use
     *
     * @return \Yahoo\Model\SharedCriterionServiceUse|null
     */
    public function getUse()
    {
        return $this->container['use'];
    }

    /**
     * Sets use
     *
     * @param \Yahoo\Model\SharedCriterionServiceUse|null $use use
     *
     * @return $this
     */
    public function setUse($use)
    {
        $this->container['use'] = $use;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


