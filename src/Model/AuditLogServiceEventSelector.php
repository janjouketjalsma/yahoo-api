<?php
/**
 * AuditLogServiceEventSelector
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yahoo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 検索広告 API リファレンス / Yahoo! Ads Search Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。<br> 「Try it out」のご利用には、事前にアプリケーションの登録が必要です。また、アプリケーションのリダイレクトURIの1つに<br> https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.htmlを登録してください。 </div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! Ads API.<br> When you use \"Try it out\", you need to register your application in advance.<br> As one of redirect URI for application, you need to set \"https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.html\". </div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Yahoo\Model;

use \ArrayAccess;
use \Yahoo\ObjectSerializer;

/**
 * AuditLogServiceEventSelector Class Doc Comment
 *
 * @category Class
 * @description &lt;div lang&#x3D;\&quot;ja\&quot;&gt;AuditLogServiceEventSelectorオブジェクトは、操作履歴の取得対象を設定します。&lt;br&gt;このフィールドは、必須です。&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;AuditLogServiceEventSelector object enables the target setting of acquiring operation history.&lt;br&gt;This field is required. &lt;/div&gt;
 * @package  Yahoo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AuditLogServiceEventSelector implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuditLogServiceEventSelector';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'entityType' => 'string',
        'eventTypes' => '\Yahoo\Model\AuditLogServiceEventTypes[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'entityType' => null,
        'eventTypes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entityType' => 'entityType',
        'eventTypes' => 'eventTypes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entityType' => 'setEntityType',
        'eventTypes' => 'setEventTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entityType' => 'getEntityType',
        'eventTypes' => 'getEventTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['entityType'] = isset($data['entityType']) ? $data['entityType'] : null;
        $this->container['eventTypes'] = isset($data['eventTypes']) ? $data['eventTypes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entityType
     *
     * @return string|null
     */
    public function getEntityType()
    {
        return $this->container['entityType'];
    }

    /**
     * Sets entityType
     *
     * @param string|null $entityType <div lang=\"ja\">AuditLogServiceEntityTypeオブジェクトは、操作履歴に出力するエンティティの種類を表します。</div><div lang=\"en\">AuditLogServiceEntityType object describes the type of entities to be output on the data of operation history.</div><hr> <p>* <code>CAMPAIGN</code> - <span lang=\"ja\">キャンペーンです。</span><span lang=\"en\">Campaign.</span></p><p>* <code>NEGATIVE_CAMPAIGN_CRITERION</code> - <span lang=\"ja\">対象外キーワードです（キャンペーン）。</span><span lang=\"en\">Negative keywords (for campaign)</span></p><p>* <code>CAMPAIGN_CRITERION</code> - <span lang=\"ja\">キャンペーンのターゲティング設定です。</span><span lang=\"en\">Targeting setting on campaign.</span></p><p>* <code>AD_GROUP</code> - <span lang=\"ja\">広告グループです。</span><span lang=\"en\">Ad group.</span></p><p>* <code>AD_GROUP_BID_MULTIPLIER</code> - <span lang=\"ja\">広告グループ入札価格調整率です。</span><span lang=\"en\">Bid adjustment for ad group.</span></p><p>* <code>BIDDABLE_AD_GROUP_CRITERION</code> - <span lang=\"ja\">入札キーワードです。</span><span lang=\"en\">Bidding keyword.</span></p><p>* <code>NEGATIVE_AD_GROUP_CRITERION</code> - <span lang=\"ja\">対象外キーワードです（広告グループ）。</span><span lang=\"en\">Negative keywords (for ad group)</span></p><p>* <code>AD</code> - <span lang=\"ja\">広告です。</span><span lang=\"en\">Ad.</span></p><p>* <code>FEED</code> - <span lang=\"ja\">Feedフォルダーです。</span><span lang=\"en\">Feed folder.</span></p><p>* <code>FEED_ITEM</code> - <span lang=\"ja\">広告表示オプションです。</span><span lang=\"en\">Ad display options.</span></p><p>* <code>CAMPAIGN_FEED</code> - <span lang=\"ja\">広告表示オプションです（キャンペーン）。</span><span lang=\"en\">Ad display options for campaign.</span></p><p>* <code>AD_GROUP_FEED</code> - <span lang=\"ja\">広告表示オプションです（広告グループ）。</span><span lang=\"en\">Ad display options for ad group.</span></p><p>* <code>SS_IO</code> - <span lang=\"ja\">アカウントです。</span><span lang=\"en\">Account.</span></p><p>* <code>SS_CONVERSION</code> - <span lang=\"ja\">コンバージョントラッカー（コンバージョン測定）です。</span><span lang=\"en\">Conversion tracker for conversion tracking.</span></p><p>* <code>BIDDING_STRATEGY</code> - <span lang=\"ja\">自動入札設定です。</span><span lang=\"en\">Auto bidding setting.</span></p><p>* <code>NEGATIVE_CAMPAIGN_USER_LIST</code> - <span lang=\"ja\">対象外ターゲットリストです（キャンペーン）。</span><span lang=\"en\">Exclude target list for campaign.</span></p><p>* <code>NEGATIVE_AD_GROUP_USER_LIST</code> - <span lang=\"ja\">対象外ターゲットリストです（広告グループ）。</span><span lang=\"en\">Exclude target list for ad group.</span></p><p>* <code>AD_GROUP_USER_LIST</code> - <span lang=\"ja\">ターゲットリストです（広告グループ）。</span><span lang=\"en\">Target list for ad group.</span></p><p>* <code>TARGET_LIST</code> - <span lang=\"ja\">サイトリターゲテイングのターゲットリストです。</span><span lang=\"en\">Target list of Site Retargeting.</span></p><p>* <code>SHARED_SET</code> - <span lang=\"ja\">共有リストです。</span><span lang=\"en\">Shared list.</span></p><p>* <code>SHARED_CRITERION</code> - <span lang=\"ja\">共有キーワードです。</span><span lang=\"en\">Shared keywords.</span></p><p>* <code>CAMPAIGN_SHARED_SET</code> - <span lang=\"ja\">キャンペーン共有リストです。</span><span lang=\"en\">Shared list for campaign.</span></p><p>* <code>AD_CUSTOMIZER</code> - <span lang=\"ja\">アドカスタマイザーです。</span><span lang=\"en\">Ad customizer.</span></p><p>* <code>EXCLUDE_AD_CUSTOMIZER</code> - <span lang=\"ja\">アドカスタマイザーを除くすべての履歴です。</span><span lang=\"en\">All operation history excepting ad customizer.</span></p><p>* <code>ALL</code> - <span lang=\"ja\">すべての履歴です。</span><span lang=\"en\">All operation history.</span></p><p>* <code>UNKNOWN</code> - <span lang=\"ja\">未知の値です。</span><span lang=\"en\">Unknown Value</span></p>
     *
     * @return $this
     */
    public function setEntityType($entityType)
    {
        $this->container['entityType'] = $entityType;

        return $this;
    }

    /**
     * Gets eventTypes
     *
     * @return \Yahoo\Model\AuditLogServiceEventTypes[]|null
     */
    public function getEventTypes()
    {
        return $this->container['eventTypes'];
    }

    /**
     * Sets eventTypes
     *
     * @param \Yahoo\Model\AuditLogServiceEventTypes[]|null $eventTypes eventTypes
     *
     * @return $this
     */
    public function setEventTypes($eventTypes)
    {
        $this->container['eventTypes'] = $eventTypes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


