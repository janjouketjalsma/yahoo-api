<?php
/**
 * ReportDefinitionServiceReportFieldAttribute
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yahoo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 検索広告 API リファレンス / Yahoo! Ads Search Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。<br> 「Try it out」のご利用には、事前にアプリケーションの登録が必要です。また、アプリケーションのリダイレクトURIの1つに<br> https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.htmlを登録してください。 </div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! Ads API.<br> When you use \"Try it out\", you need to register your application in advance.<br> As one of redirect URI for application, you need to set \"https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.html\". </div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Yahoo\Model;

use \ArrayAccess;
use \Yahoo\ObjectSerializer;

/**
 * ReportDefinitionServiceReportFieldAttribute Class Doc Comment
 *
 * @category Class
 * @description &lt;div lang&#x3D;\&quot;ja\&quot;&gt;ReportDefinitionServiceReportFieldAttributeオブジェクトは、レポート定義の作成に使用できるフィールドを表します。&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;ReportDefinitionServiceReportFieldAttribute object describes the available field to create report definition.&lt;/div&gt;
 * @package  Yahoo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReportDefinitionServiceReportFieldAttribute implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReportDefinitionServiceReportFieldAttribute';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'canFilter' => 'bool',
        'canSelect' => 'bool',
        'displayFieldNameEN' => 'string',
        'displayFieldNameJA' => 'string',
        'fieldName' => 'string',
        'fieldType' => 'string',
        'impossibleCombinationFields' => 'string[]',
        'xmlAttributeName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'canFilter' => null,
        'canSelect' => null,
        'displayFieldNameEN' => null,
        'displayFieldNameJA' => null,
        'fieldName' => null,
        'fieldType' => null,
        'impossibleCombinationFields' => null,
        'xmlAttributeName' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'canFilter' => 'canFilter',
        'canSelect' => 'canSelect',
        'displayFieldNameEN' => 'displayFieldNameEN',
        'displayFieldNameJA' => 'displayFieldNameJA',
        'fieldName' => 'fieldName',
        'fieldType' => 'fieldType',
        'impossibleCombinationFields' => 'impossibleCombinationFields',
        'xmlAttributeName' => 'xmlAttributeName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'canFilter' => 'setCanFilter',
        'canSelect' => 'setCanSelect',
        'displayFieldNameEN' => 'setDisplayFieldNameEN',
        'displayFieldNameJA' => 'setDisplayFieldNameJA',
        'fieldName' => 'setFieldName',
        'fieldType' => 'setFieldType',
        'impossibleCombinationFields' => 'setImpossibleCombinationFields',
        'xmlAttributeName' => 'setXmlAttributeName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'canFilter' => 'getCanFilter',
        'canSelect' => 'getCanSelect',
        'displayFieldNameEN' => 'getDisplayFieldNameEN',
        'displayFieldNameJA' => 'getDisplayFieldNameJA',
        'fieldName' => 'getFieldName',
        'fieldType' => 'getFieldType',
        'impossibleCombinationFields' => 'getImpossibleCombinationFields',
        'xmlAttributeName' => 'getXmlAttributeName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['canFilter'] = isset($data['canFilter']) ? $data['canFilter'] : null;
        $this->container['canSelect'] = isset($data['canSelect']) ? $data['canSelect'] : null;
        $this->container['displayFieldNameEN'] = isset($data['displayFieldNameEN']) ? $data['displayFieldNameEN'] : null;
        $this->container['displayFieldNameJA'] = isset($data['displayFieldNameJA']) ? $data['displayFieldNameJA'] : null;
        $this->container['fieldName'] = isset($data['fieldName']) ? $data['fieldName'] : null;
        $this->container['fieldType'] = isset($data['fieldType']) ? $data['fieldType'] : null;
        $this->container['impossibleCombinationFields'] = isset($data['impossibleCombinationFields']) ? $data['impossibleCombinationFields'] : null;
        $this->container['xmlAttributeName'] = isset($data['xmlAttributeName']) ? $data['xmlAttributeName'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets canFilter
     *
     * @return bool|null
     */
    public function getCanFilter()
    {
        return $this->container['canFilter'];
    }

    /**
     * Sets canFilter
     *
     * @param bool|null $canFilter <div lang=\"ja\">ユーザーがこのフィールドにフィルタを 適用できるかどうかを示します。</div><div lang=\"en\">Indicate if use can filter the fields.</div>
     *
     * @return $this
     */
    public function setCanFilter($canFilter)
    {
        $this->container['canFilter'] = $canFilter;

        return $this;
    }

    /**
     * Gets canSelect
     *
     * @return bool|null
     */
    public function getCanSelect()
    {
        return $this->container['canSelect'];
    }

    /**
     * Sets canSelect
     *
     * @param bool|null $canSelect <div lang=\"ja\">ユーザーがこのフィールドを 選択できるかどうかを示します。</div><div lang=\"en\">Indicate if user can select the fields.</div>
     *
     * @return $this
     */
    public function setCanSelect($canSelect)
    {
        $this->container['canSelect'] = $canSelect;

        return $this;
    }

    /**
     * Gets displayFieldNameEN
     *
     * @return string|null
     */
    public function getDisplayFieldNameEN()
    {
        return $this->container['displayFieldNameEN'];
    }

    /**
     * Sets displayFieldNameEN
     *
     * @param string|null $displayFieldNameEN <div lang=\"ja\">ダウンロードされたレポートに 表示される英語名です。</div><div lang=\"en\">Field name displayed in downloaded report (in English).</div>
     *
     * @return $this
     */
    public function setDisplayFieldNameEN($displayFieldNameEN)
    {
        $this->container['displayFieldNameEN'] = $displayFieldNameEN;

        return $this;
    }

    /**
     * Gets displayFieldNameJA
     *
     * @return string|null
     */
    public function getDisplayFieldNameJA()
    {
        return $this->container['displayFieldNameJA'];
    }

    /**
     * Sets displayFieldNameJA
     *
     * @param string|null $displayFieldNameJA <div lang=\"ja\">ダウンロードされたレポートに 表示される日本語名です。</div><div lang=\"en\">Field name displayed in downloaded report (in Japanese).</div>
     *
     * @return $this
     */
    public function setDisplayFieldNameJA($displayFieldNameJA)
    {
        $this->container['displayFieldNameJA'] = $displayFieldNameJA;

        return $this;
    }

    /**
     * Gets fieldName
     *
     * @return string|null
     */
    public function getFieldName()
    {
        return $this->container['fieldName'];
    }

    /**
     * Sets fieldName
     *
     * @param string|null $fieldName <div lang=\"ja\">フィールド名です。</div><div lang=\"en\">Field name.</div>
     *
     * @return $this
     */
    public function setFieldName($fieldName)
    {
        $this->container['fieldName'] = $fieldName;

        return $this;
    }

    /**
     * Gets fieldType
     *
     * @return string|null
     */
    public function getFieldType()
    {
        return $this->container['fieldType'];
    }

    /**
     * Sets fieldType
     *
     * @param string|null $fieldType <div lang=\"ja\">フィールドの種類です。<br>数字、文字列、Enum値等を表します。</div><div lang=\"en\">Type of field.<br>Displays int, string, Enum, etc.</div>
     *
     * @return $this
     */
    public function setFieldType($fieldType)
    {
        $this->container['fieldType'] = $fieldType;

        return $this;
    }

    /**
     * Gets impossibleCombinationFields
     *
     * @return string[]|null
     */
    public function getImpossibleCombinationFields()
    {
        return $this->container['impossibleCombinationFields'];
    }

    /**
     * Sets impossibleCombinationFields
     *
     * @param string[]|null $impossibleCombinationFields <div lang=\"ja\">組み合わせができないレポートフィールドです。</div><div lang=\"en\">Report fields which cannot be combined.</div>
     *
     * @return $this
     */
    public function setImpossibleCombinationFields($impossibleCombinationFields)
    {
        $this->container['impossibleCombinationFields'] = $impossibleCombinationFields;

        return $this;
    }

    /**
     * Gets xmlAttributeName
     *
     * @return string|null
     */
    public function getXmlAttributeName()
    {
        return $this->container['xmlAttributeName'];
    }

    /**
     * Sets xmlAttributeName
     *
     * @param string|null $xmlAttributeName <div lang=\"ja\">ダウンロードしたレポートの XMLアトリビュートです。</div><div lang=\"en\">XML attribute name displayed in downloaded report.</div>
     *
     * @return $this
     */
    public function setXmlAttributeName($xmlAttributeName)
    {
        $this->container['xmlAttributeName'] = $xmlAttributeName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


