<?php
/**
 * PageFeedItemServiceApi
 * PHP version 5
 *
 * @category Class
 * @package  Yahoo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 検索広告 API リファレンス / Yahoo! Ads Search Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。<br> 「Try it out」のご利用には、事前にアプリケーションの登録が必要です。また、アプリケーションのリダイレクトURIの1つに<br> https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.htmlを登録してください。 </div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! Ads API.<br> When you use \"Try it out\", you need to register your application in advance.<br> As one of redirect URI for application, you need to set \"https://yahoojp-marketing.github.io/ads-search-api-documents/oauth2-redirect.html\". </div>
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Yahoo\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Yahoo\ApiException;
use Yahoo\Configuration;
use Yahoo\HeaderSelector;
use Yahoo\ObjectSerializer;

/**
 * PageFeedItemServiceApi Class Doc Comment
 *
 * @category Class
 * @package  Yahoo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PageFeedItemServiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation pageFeedItemServiceAddDownloadJobPost
     *
     * @param  \Yahoo\Model\PageFeedItemServiceDownloadJobOperation $pageFeedItemServiceDownloadJobOperation pageFeedItemServiceDownloadJobOperation (optional)
     *
     * @throws \Yahoo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return |\Yahoo\Model\PageFeedItemServiceAddDownloadJobResponse
     */
    public function pageFeedItemServiceAddDownloadJobPost($pageFeedItemServiceDownloadJobOperation = null)
    {
        list($response) = $this->pageFeedItemServiceAddDownloadJobPostWithHttpInfo($pageFeedItemServiceDownloadJobOperation);
        return $response;
    }

    /**
     * Operation pageFeedItemServiceAddDownloadJobPostWithHttpInfo
     *
     * @param  \Yahoo\Model\PageFeedItemServiceDownloadJobOperation $pageFeedItemServiceDownloadJobOperation (optional)
     *
     * @throws \Yahoo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of |\Yahoo\Model\PageFeedItemServiceAddDownloadJobResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function pageFeedItemServiceAddDownloadJobPostWithHttpInfo($pageFeedItemServiceDownloadJobOperation = null)
    {
        $request = $this->pageFeedItemServiceAddDownloadJobPostRequest($pageFeedItemServiceDownloadJobOperation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Yahoo\Model\PageFeedItemServiceAddDownloadJobResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yahoo\Model\PageFeedItemServiceAddDownloadJobResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Yahoo\Model\PageFeedItemServiceAddDownloadJobResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yahoo\Model\PageFeedItemServiceAddDownloadJobResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pageFeedItemServiceAddDownloadJobPostAsync
     *
     * 
     *
     * @param  \Yahoo\Model\PageFeedItemServiceDownloadJobOperation $pageFeedItemServiceDownloadJobOperation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pageFeedItemServiceAddDownloadJobPostAsync($pageFeedItemServiceDownloadJobOperation = null)
    {
        return $this->pageFeedItemServiceAddDownloadJobPostAsyncWithHttpInfo($pageFeedItemServiceDownloadJobOperation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pageFeedItemServiceAddDownloadJobPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Yahoo\Model\PageFeedItemServiceDownloadJobOperation $pageFeedItemServiceDownloadJobOperation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pageFeedItemServiceAddDownloadJobPostAsyncWithHttpInfo($pageFeedItemServiceDownloadJobOperation = null)
    {
        $returnType = '\Yahoo\Model\PageFeedItemServiceAddDownloadJobResponse';
        $request = $this->pageFeedItemServiceAddDownloadJobPostRequest($pageFeedItemServiceDownloadJobOperation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pageFeedItemServiceAddDownloadJobPost'
     *
     * @param  \Yahoo\Model\PageFeedItemServiceDownloadJobOperation $pageFeedItemServiceDownloadJobOperation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pageFeedItemServiceAddDownloadJobPostRequest($pageFeedItemServiceDownloadJobOperation = null)
    {

        $resourcePath = '/PageFeedItemService/addDownloadJob';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($pageFeedItemServiceDownloadJobOperation)) {
            $_tempBody = $pageFeedItemServiceDownloadJobOperation;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pageFeedItemServiceDownloadErrorFilePost
     *
     * @param  \Yahoo\Model\PageFeedItemServiceDownloadSelector $pageFeedItemServiceDownloadSelector pageFeedItemServiceDownloadSelector (optional)
     *
     * @throws \Yahoo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return |\SplFileObject
     */
    public function pageFeedItemServiceDownloadErrorFilePost($pageFeedItemServiceDownloadSelector = null)
    {
        list($response) = $this->pageFeedItemServiceDownloadErrorFilePostWithHttpInfo($pageFeedItemServiceDownloadSelector);
        return $response;
    }

    /**
     * Operation pageFeedItemServiceDownloadErrorFilePostWithHttpInfo
     *
     * @param  \Yahoo\Model\PageFeedItemServiceDownloadSelector $pageFeedItemServiceDownloadSelector (optional)
     *
     * @throws \Yahoo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of |\SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function pageFeedItemServiceDownloadErrorFilePostWithHttpInfo($pageFeedItemServiceDownloadSelector = null)
    {
        $request = $this->pageFeedItemServiceDownloadErrorFilePostRequest($pageFeedItemServiceDownloadSelector);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pageFeedItemServiceDownloadErrorFilePostAsync
     *
     * 
     *
     * @param  \Yahoo\Model\PageFeedItemServiceDownloadSelector $pageFeedItemServiceDownloadSelector (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pageFeedItemServiceDownloadErrorFilePostAsync($pageFeedItemServiceDownloadSelector = null)
    {
        return $this->pageFeedItemServiceDownloadErrorFilePostAsyncWithHttpInfo($pageFeedItemServiceDownloadSelector)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pageFeedItemServiceDownloadErrorFilePostAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Yahoo\Model\PageFeedItemServiceDownloadSelector $pageFeedItemServiceDownloadSelector (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pageFeedItemServiceDownloadErrorFilePostAsyncWithHttpInfo($pageFeedItemServiceDownloadSelector = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->pageFeedItemServiceDownloadErrorFilePostRequest($pageFeedItemServiceDownloadSelector);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pageFeedItemServiceDownloadErrorFilePost'
     *
     * @param  \Yahoo\Model\PageFeedItemServiceDownloadSelector $pageFeedItemServiceDownloadSelector (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pageFeedItemServiceDownloadErrorFilePostRequest($pageFeedItemServiceDownloadSelector = null)
    {

        $resourcePath = '/PageFeedItemService/downloadErrorFile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($pageFeedItemServiceDownloadSelector)) {
            $_tempBody = $pageFeedItemServiceDownloadSelector;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pageFeedItemServiceDownloadPost
     *
     * @param  \Yahoo\Model\PageFeedItemServiceDownloadSelector $pageFeedItemServiceDownloadSelector pageFeedItemServiceDownloadSelector (optional)
     *
     * @throws \Yahoo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return |\SplFileObject
     */
    public function pageFeedItemServiceDownloadPost($pageFeedItemServiceDownloadSelector = null)
    {
        list($response) = $this->pageFeedItemServiceDownloadPostWithHttpInfo($pageFeedItemServiceDownloadSelector);
        return $response;
    }

    /**
     * Operation pageFeedItemServiceDownloadPostWithHttpInfo
     *
     * @param  \Yahoo\Model\PageFeedItemServiceDownloadSelector $pageFeedItemServiceDownloadSelector (optional)
     *
     * @throws \Yahoo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of |\SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function pageFeedItemServiceDownloadPostWithHttpInfo($pageFeedItemServiceDownloadSelector = null)
    {
        $request = $this->pageFeedItemServiceDownloadPostRequest($pageFeedItemServiceDownloadSelector);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pageFeedItemServiceDownloadPostAsync
     *
     * 
     *
     * @param  \Yahoo\Model\PageFeedItemServiceDownloadSelector $pageFeedItemServiceDownloadSelector (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pageFeedItemServiceDownloadPostAsync($pageFeedItemServiceDownloadSelector = null)
    {
        return $this->pageFeedItemServiceDownloadPostAsyncWithHttpInfo($pageFeedItemServiceDownloadSelector)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pageFeedItemServiceDownloadPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Yahoo\Model\PageFeedItemServiceDownloadSelector $pageFeedItemServiceDownloadSelector (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pageFeedItemServiceDownloadPostAsyncWithHttpInfo($pageFeedItemServiceDownloadSelector = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->pageFeedItemServiceDownloadPostRequest($pageFeedItemServiceDownloadSelector);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pageFeedItemServiceDownloadPost'
     *
     * @param  \Yahoo\Model\PageFeedItemServiceDownloadSelector $pageFeedItemServiceDownloadSelector (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pageFeedItemServiceDownloadPostRequest($pageFeedItemServiceDownloadSelector = null)
    {

        $resourcePath = '/PageFeedItemService/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($pageFeedItemServiceDownloadSelector)) {
            $_tempBody = $pageFeedItemServiceDownloadSelector;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pageFeedItemServiceGetJobStatusPost
     *
     * @param  \Yahoo\Model\PageFeedItemServiceJobStatusSelector $pageFeedItemServiceJobStatusSelector pageFeedItemServiceJobStatusSelector (optional)
     *
     * @throws \Yahoo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return |\Yahoo\Model\PageFeedItemServiceGetJobStatusResponse
     */
    public function pageFeedItemServiceGetJobStatusPost($pageFeedItemServiceJobStatusSelector = null)
    {
        list($response) = $this->pageFeedItemServiceGetJobStatusPostWithHttpInfo($pageFeedItemServiceJobStatusSelector);
        return $response;
    }

    /**
     * Operation pageFeedItemServiceGetJobStatusPostWithHttpInfo
     *
     * @param  \Yahoo\Model\PageFeedItemServiceJobStatusSelector $pageFeedItemServiceJobStatusSelector (optional)
     *
     * @throws \Yahoo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of |\Yahoo\Model\PageFeedItemServiceGetJobStatusResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function pageFeedItemServiceGetJobStatusPostWithHttpInfo($pageFeedItemServiceJobStatusSelector = null)
    {
        $request = $this->pageFeedItemServiceGetJobStatusPostRequest($pageFeedItemServiceJobStatusSelector);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Yahoo\Model\PageFeedItemServiceGetJobStatusResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yahoo\Model\PageFeedItemServiceGetJobStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Yahoo\Model\PageFeedItemServiceGetJobStatusResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yahoo\Model\PageFeedItemServiceGetJobStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pageFeedItemServiceGetJobStatusPostAsync
     *
     * 
     *
     * @param  \Yahoo\Model\PageFeedItemServiceJobStatusSelector $pageFeedItemServiceJobStatusSelector (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pageFeedItemServiceGetJobStatusPostAsync($pageFeedItemServiceJobStatusSelector = null)
    {
        return $this->pageFeedItemServiceGetJobStatusPostAsyncWithHttpInfo($pageFeedItemServiceJobStatusSelector)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pageFeedItemServiceGetJobStatusPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Yahoo\Model\PageFeedItemServiceJobStatusSelector $pageFeedItemServiceJobStatusSelector (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pageFeedItemServiceGetJobStatusPostAsyncWithHttpInfo($pageFeedItemServiceJobStatusSelector = null)
    {
        $returnType = '\Yahoo\Model\PageFeedItemServiceGetJobStatusResponse';
        $request = $this->pageFeedItemServiceGetJobStatusPostRequest($pageFeedItemServiceJobStatusSelector);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pageFeedItemServiceGetJobStatusPost'
     *
     * @param  \Yahoo\Model\PageFeedItemServiceJobStatusSelector $pageFeedItemServiceJobStatusSelector (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pageFeedItemServiceGetJobStatusPostRequest($pageFeedItemServiceJobStatusSelector = null)
    {

        $resourcePath = '/PageFeedItemService/getJobStatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($pageFeedItemServiceJobStatusSelector)) {
            $_tempBody = $pageFeedItemServiceJobStatusSelector;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pageFeedItemServiceGetPost
     *
     * @param  \Yahoo\Model\PageFeedItemServiceSelector $pageFeedItemServiceSelector pageFeedItemServiceSelector (optional)
     *
     * @throws \Yahoo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return |\Yahoo\Model\PageFeedItemServiceGetResponse
     */
    public function pageFeedItemServiceGetPost($pageFeedItemServiceSelector = null)
    {
        list($response) = $this->pageFeedItemServiceGetPostWithHttpInfo($pageFeedItemServiceSelector);
        return $response;
    }

    /**
     * Operation pageFeedItemServiceGetPostWithHttpInfo
     *
     * @param  \Yahoo\Model\PageFeedItemServiceSelector $pageFeedItemServiceSelector (optional)
     *
     * @throws \Yahoo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of |\Yahoo\Model\PageFeedItemServiceGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function pageFeedItemServiceGetPostWithHttpInfo($pageFeedItemServiceSelector = null)
    {
        $request = $this->pageFeedItemServiceGetPostRequest($pageFeedItemServiceSelector);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Yahoo\Model\PageFeedItemServiceGetResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yahoo\Model\PageFeedItemServiceGetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Yahoo\Model\PageFeedItemServiceGetResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yahoo\Model\PageFeedItemServiceGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pageFeedItemServiceGetPostAsync
     *
     * 
     *
     * @param  \Yahoo\Model\PageFeedItemServiceSelector $pageFeedItemServiceSelector (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pageFeedItemServiceGetPostAsync($pageFeedItemServiceSelector = null)
    {
        return $this->pageFeedItemServiceGetPostAsyncWithHttpInfo($pageFeedItemServiceSelector)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pageFeedItemServiceGetPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Yahoo\Model\PageFeedItemServiceSelector $pageFeedItemServiceSelector (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pageFeedItemServiceGetPostAsyncWithHttpInfo($pageFeedItemServiceSelector = null)
    {
        $returnType = '\Yahoo\Model\PageFeedItemServiceGetResponse';
        $request = $this->pageFeedItemServiceGetPostRequest($pageFeedItemServiceSelector);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pageFeedItemServiceGetPost'
     *
     * @param  \Yahoo\Model\PageFeedItemServiceSelector $pageFeedItemServiceSelector (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pageFeedItemServiceGetPostRequest($pageFeedItemServiceSelector = null)
    {

        $resourcePath = '/PageFeedItemService/get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($pageFeedItemServiceSelector)) {
            $_tempBody = $pageFeedItemServiceSelector;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pageFeedItemServiceGetReviewSummaryPost
     *
     * @param  \Yahoo\Model\PageFeedItemServiceReviewSummarySelector $pageFeedItemServiceReviewSummarySelector pageFeedItemServiceReviewSummarySelector (optional)
     *
     * @throws \Yahoo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return |\Yahoo\Model\PageFeedItemServiceGetReviewSummaryResponse
     */
    public function pageFeedItemServiceGetReviewSummaryPost($pageFeedItemServiceReviewSummarySelector = null)
    {
        list($response) = $this->pageFeedItemServiceGetReviewSummaryPostWithHttpInfo($pageFeedItemServiceReviewSummarySelector);
        return $response;
    }

    /**
     * Operation pageFeedItemServiceGetReviewSummaryPostWithHttpInfo
     *
     * @param  \Yahoo\Model\PageFeedItemServiceReviewSummarySelector $pageFeedItemServiceReviewSummarySelector (optional)
     *
     * @throws \Yahoo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of |\Yahoo\Model\PageFeedItemServiceGetReviewSummaryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function pageFeedItemServiceGetReviewSummaryPostWithHttpInfo($pageFeedItemServiceReviewSummarySelector = null)
    {
        $request = $this->pageFeedItemServiceGetReviewSummaryPostRequest($pageFeedItemServiceReviewSummarySelector);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Yahoo\Model\PageFeedItemServiceGetReviewSummaryResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yahoo\Model\PageFeedItemServiceGetReviewSummaryResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Yahoo\Model\PageFeedItemServiceGetReviewSummaryResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yahoo\Model\PageFeedItemServiceGetReviewSummaryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pageFeedItemServiceGetReviewSummaryPostAsync
     *
     * 
     *
     * @param  \Yahoo\Model\PageFeedItemServiceReviewSummarySelector $pageFeedItemServiceReviewSummarySelector (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pageFeedItemServiceGetReviewSummaryPostAsync($pageFeedItemServiceReviewSummarySelector = null)
    {
        return $this->pageFeedItemServiceGetReviewSummaryPostAsyncWithHttpInfo($pageFeedItemServiceReviewSummarySelector)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pageFeedItemServiceGetReviewSummaryPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Yahoo\Model\PageFeedItemServiceReviewSummarySelector $pageFeedItemServiceReviewSummarySelector (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pageFeedItemServiceGetReviewSummaryPostAsyncWithHttpInfo($pageFeedItemServiceReviewSummarySelector = null)
    {
        $returnType = '\Yahoo\Model\PageFeedItemServiceGetReviewSummaryResponse';
        $request = $this->pageFeedItemServiceGetReviewSummaryPostRequest($pageFeedItemServiceReviewSummarySelector);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pageFeedItemServiceGetReviewSummaryPost'
     *
     * @param  \Yahoo\Model\PageFeedItemServiceReviewSummarySelector $pageFeedItemServiceReviewSummarySelector (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pageFeedItemServiceGetReviewSummaryPostRequest($pageFeedItemServiceReviewSummarySelector = null)
    {

        $resourcePath = '/PageFeedItemService/getReviewSummary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;
        if (isset($pageFeedItemServiceReviewSummarySelector)) {
            $_tempBody = $pageFeedItemServiceReviewSummarySelector;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pageFeedItemServiceUploadPost
     *
     * @param  int $accountId &lt;div lang&#x3D;\&quot;ja\&quot;&gt;アカウントIDです。&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;Account ID.&lt;/div&gt; (required)
     * @param  string $uploadType &lt;div lang&#x3D;\&quot;ja\&quot;&gt;PageFeedItemUploadTypeは、アップロードする方法の種類を表します。&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;PageFeedItemUploadType displays kind of upload method.&lt;/div&gt;&lt;hr&gt; &lt;code&gt;NEW_OR_REPLACE&lt;/code&gt; - &lt;div lang&#x3D;\&quot;ja\&quot;&gt;新規登録または、すべて置き換える場合の設定&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;New registration or replace all.&lt;/div&gt; &lt;code&gt;MODIFY&lt;/code&gt; - &lt;div lang&#x3D;\&quot;ja\&quot;&gt;既存のページフィードアイテムを更新&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;Modify existing page feed item.&lt;/div&gt; (required)
     * @param  int $feedId &lt;div lang&#x3D;\&quot;ja\&quot;&gt;フィードIDです。&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;Feed ID.&lt;/div&gt; (required)
     * @param  \SplFileObject $file file (optional)
     *
     * @throws \Yahoo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return |\Yahoo\Model\PageFeedItemServiceUploadResponse
     */
    public function pageFeedItemServiceUploadPost($accountId, $uploadType, $feedId, $file = null)
    {
        list($response) = $this->pageFeedItemServiceUploadPostWithHttpInfo($accountId, $uploadType, $feedId, $file);
        return $response;
    }

    /**
     * Operation pageFeedItemServiceUploadPostWithHttpInfo
     *
     * @param  int $accountId &lt;div lang&#x3D;\&quot;ja\&quot;&gt;アカウントIDです。&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;Account ID.&lt;/div&gt; (required)
     * @param  string $uploadType &lt;div lang&#x3D;\&quot;ja\&quot;&gt;PageFeedItemUploadTypeは、アップロードする方法の種類を表します。&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;PageFeedItemUploadType displays kind of upload method.&lt;/div&gt;&lt;hr&gt; &lt;code&gt;NEW_OR_REPLACE&lt;/code&gt; - &lt;div lang&#x3D;\&quot;ja\&quot;&gt;新規登録または、すべて置き換える場合の設定&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;New registration or replace all.&lt;/div&gt; &lt;code&gt;MODIFY&lt;/code&gt; - &lt;div lang&#x3D;\&quot;ja\&quot;&gt;既存のページフィードアイテムを更新&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;Modify existing page feed item.&lt;/div&gt; (required)
     * @param  int $feedId &lt;div lang&#x3D;\&quot;ja\&quot;&gt;フィードIDです。&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;Feed ID.&lt;/div&gt; (required)
     * @param  \SplFileObject $file (optional)
     *
     * @throws \Yahoo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of |\Yahoo\Model\PageFeedItemServiceUploadResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function pageFeedItemServiceUploadPostWithHttpInfo($accountId, $uploadType, $feedId, $file = null)
    {
        $request = $this->pageFeedItemServiceUploadPostRequest($accountId, $uploadType, $feedId, $file);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Yahoo\Model\PageFeedItemServiceUploadResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Yahoo\Model\PageFeedItemServiceUploadResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Yahoo\Model\PageFeedItemServiceUploadResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Yahoo\Model\PageFeedItemServiceUploadResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pageFeedItemServiceUploadPostAsync
     *
     * 
     *
     * @param  int $accountId &lt;div lang&#x3D;\&quot;ja\&quot;&gt;アカウントIDです。&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;Account ID.&lt;/div&gt; (required)
     * @param  string $uploadType &lt;div lang&#x3D;\&quot;ja\&quot;&gt;PageFeedItemUploadTypeは、アップロードする方法の種類を表します。&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;PageFeedItemUploadType displays kind of upload method.&lt;/div&gt;&lt;hr&gt; &lt;code&gt;NEW_OR_REPLACE&lt;/code&gt; - &lt;div lang&#x3D;\&quot;ja\&quot;&gt;新規登録または、すべて置き換える場合の設定&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;New registration or replace all.&lt;/div&gt; &lt;code&gt;MODIFY&lt;/code&gt; - &lt;div lang&#x3D;\&quot;ja\&quot;&gt;既存のページフィードアイテムを更新&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;Modify existing page feed item.&lt;/div&gt; (required)
     * @param  int $feedId &lt;div lang&#x3D;\&quot;ja\&quot;&gt;フィードIDです。&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;Feed ID.&lt;/div&gt; (required)
     * @param  \SplFileObject $file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pageFeedItemServiceUploadPostAsync($accountId, $uploadType, $feedId, $file = null)
    {
        return $this->pageFeedItemServiceUploadPostAsyncWithHttpInfo($accountId, $uploadType, $feedId, $file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pageFeedItemServiceUploadPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $accountId &lt;div lang&#x3D;\&quot;ja\&quot;&gt;アカウントIDです。&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;Account ID.&lt;/div&gt; (required)
     * @param  string $uploadType &lt;div lang&#x3D;\&quot;ja\&quot;&gt;PageFeedItemUploadTypeは、アップロードする方法の種類を表します。&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;PageFeedItemUploadType displays kind of upload method.&lt;/div&gt;&lt;hr&gt; &lt;code&gt;NEW_OR_REPLACE&lt;/code&gt; - &lt;div lang&#x3D;\&quot;ja\&quot;&gt;新規登録または、すべて置き換える場合の設定&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;New registration or replace all.&lt;/div&gt; &lt;code&gt;MODIFY&lt;/code&gt; - &lt;div lang&#x3D;\&quot;ja\&quot;&gt;既存のページフィードアイテムを更新&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;Modify existing page feed item.&lt;/div&gt; (required)
     * @param  int $feedId &lt;div lang&#x3D;\&quot;ja\&quot;&gt;フィードIDです。&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;Feed ID.&lt;/div&gt; (required)
     * @param  \SplFileObject $file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pageFeedItemServiceUploadPostAsyncWithHttpInfo($accountId, $uploadType, $feedId, $file = null)
    {
        $returnType = '\Yahoo\Model\PageFeedItemServiceUploadResponse';
        $request = $this->pageFeedItemServiceUploadPostRequest($accountId, $uploadType, $feedId, $file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pageFeedItemServiceUploadPost'
     *
     * @param  int $accountId &lt;div lang&#x3D;\&quot;ja\&quot;&gt;アカウントIDです。&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;Account ID.&lt;/div&gt; (required)
     * @param  string $uploadType &lt;div lang&#x3D;\&quot;ja\&quot;&gt;PageFeedItemUploadTypeは、アップロードする方法の種類を表します。&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;PageFeedItemUploadType displays kind of upload method.&lt;/div&gt;&lt;hr&gt; &lt;code&gt;NEW_OR_REPLACE&lt;/code&gt; - &lt;div lang&#x3D;\&quot;ja\&quot;&gt;新規登録または、すべて置き換える場合の設定&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;New registration or replace all.&lt;/div&gt; &lt;code&gt;MODIFY&lt;/code&gt; - &lt;div lang&#x3D;\&quot;ja\&quot;&gt;既存のページフィードアイテムを更新&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;Modify existing page feed item.&lt;/div&gt; (required)
     * @param  int $feedId &lt;div lang&#x3D;\&quot;ja\&quot;&gt;フィードIDです。&lt;/div&gt;&lt;div lang&#x3D;\&quot;en\&quot;&gt;Feed ID.&lt;/div&gt; (required)
     * @param  \SplFileObject $file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pageFeedItemServiceUploadPostRequest($accountId, $uploadType, $feedId, $file = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling pageFeedItemServiceUploadPost'
            );
        }
        // verify the required parameter 'uploadType' is set
        if ($uploadType === null || (is_array($uploadType) && count($uploadType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uploadType when calling pageFeedItemServiceUploadPost'
            );
        }
        // verify the required parameter 'feedId' is set
        if ($feedId === null || (is_array($feedId) && count($feedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feedId when calling pageFeedItemServiceUploadPost'
            );
        }

        $resourcePath = '/PageFeedItemService/upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accountId !== null) {
            if('form' === 'form' && is_array($accountId)) {
                foreach($accountId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['accountId'] = $accountId;
            }
        }
        // query params
        if ($uploadType !== null) {
            if('form' === 'form' && is_array($uploadType)) {
                foreach($uploadType as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['uploadType'] = $uploadType;
            }
        }
        // query params
        if ($feedId !== null) {
            if('form' === 'form' && is_array($feedId)) {
                foreach($feedId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['feedId'] = $feedId;
            }
        }



        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($file), 'rb');
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
